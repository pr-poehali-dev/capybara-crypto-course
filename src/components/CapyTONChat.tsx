import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Badge } from "@/components/ui/badge";
import Icon from "@/components/ui/icon";

interface Message {
  id: string;
  content: string;
  sender: "user" | "ai";
  timestamp: Date;
}

interface AIModel {
  id: string;
  name: string;
  description: string;
  color: string;
  personality: string;
}

const aiModels: AIModel[] = [
  {
    id: "capyton",
    name: "CapyTON",
    description: "–ë–∞–∑–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è TON",
    color: "bg-blue-500",
    personality: "–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ —Ç–µ—Ä–ø–µ–ª–∏–≤—ã–π, –æ–±—ä—è—Å–Ω—è–µ—Ç –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏",
  },
  {
    id: "capyton-pro",
    name: "CapyTON Pro",
    description: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ –∏ —Å–æ–≤–µ—Ç—ã –ø–æ TON",
    color: "bg-purple-500",
    personality: "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å, –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è",
  },
  {
    id: "capyton-max",
    name: "CapyTON Max",
    description: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
    color: "bg-orange-500",
    personality: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –≥—É—Ä—É, –ø–æ–º–æ–≥–∞–µ—Ç —Å –∫–æ–¥–æ–º –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π",
  },
  {
    id: "capyton-max-pro",
    name: "CapyTON Max Pro",
    description: "–≠–ª–∏—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤",
    color: "bg-gradient-to-r from-purple-600 to-pink-600",
    personality: "–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –≤—ã—Å—à–µ–≥–æ —É—Ä–æ–≤–Ω—è",
  },
];

const CapyTONChat = () => {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "1",
      content:
        "–ü—Ä–∏–≤–µ—Ç! –Ø CapyTON, —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∏–∑—É—á–µ–Ω–∏–∏ TON –±–ª–æ–∫—á–µ–π–Ω–∞! ü¶´ –í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å –ò–ò –∏ –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã!",
      sender: "ai",
      timestamp: new Date(),
    },
  ]);
  const [inputValue, setInputValue] = useState("");
  const [selectedModel, setSelectedModel] = useState("capyton");
  const [isTyping, setIsTyping] = useState(false);

  const currentModel =
    aiModels.find((model) => model.id === selectedModel) || aiModels[0];

  const sendMessage = async () => {
    if (!inputValue.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      content: inputValue,
      sender: "user",
      timestamp: new Date(),
    };

    setMessages((prev) => [...prev, userMessage]);
    setInputValue("");
    setIsTyping(true);

    // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò
    setTimeout(() => {
      const aiResponse: Message = {
        id: (Date.now() + 1).toString(),
        content: getAIResponse(inputValue, selectedModel),
        sender: "ai",
        timestamp: new Date(),
      };
      setMessages((prev) => [...prev, aiResponse]);
      setIsTyping(false);
    }, 1500);
  };

  const getAIResponse = (question: string, modelId: string): string => {
    const responses = {
      capyton: `–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! ü¶´ –ö–∞–∫ –±–∞–∑–æ–≤—ã–π CapyTON, –æ–±—ä—è—Å–Ω—é –ø—Ä–æ—Å—Ç–æ: ${question.toLowerCase().includes("ton") ? "TON - —ç—Ç–æ –±—ã—Å—Ç—Ä—ã–π –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã–π –±–ª–æ–∫—á–µ–π–Ω" : "–î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º —ç—Ç–æ –ø–æ—à–∞–≥–æ–≤–æ"}. –ù—É–∂–Ω—ã –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏?`,
      "capyton-pro": `–ö–∞–∫ CapyTON Pro, –¥–∞–º —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑: ${question.toLowerCase().includes("—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞") ? "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ TON –≤–∫–ª—é—á–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å FunC, Fift –∏ TL-B —Å—Ö–µ–º–∞–º–∏" : "–≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –≥–ª—É–±–æ–∫–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"}. –•–æ—á–µ—à—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é?`,
      "capyton-max": `CapyTON Max –∑–¥–µ—Å—å! üöÄ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ: ${question.toLowerCase().includes("–∫–æ–¥") ? "–í–æ—Ç –ø—Ä–∏–º–µ—Ä –∫–æ–¥–∞ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞" : "–†–∞—Å—Å–º–æ—Ç—Ä–∏–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω"}. –ì–æ—Ç–æ–≤ –ø–æ–∫–∞–∑–∞—Ç—å implementation?`,
      "capyton-max-pro": `CapyTON Max Pro –Ω–∞ —Å–≤—è–∑–∏! üíé –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥: ${question.toLowerCase().includes("–±–∏–∑–Ω–µ—Å") ? "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º market fit –∏ tokenomics" : "–ü–ª–∞–Ω–∏—Ä—É–µ–º enterprise-—Ä–µ—à–µ–Ω–∏–µ"}. –û–±—Å—É–¥–∏–º roadmap?`,
    };

    return responses[modelId as keyof typeof responses] || responses.capyton;
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  return (
    <Card className="w-full max-w-4xl mx-auto h-[600px] flex flex-col">
      <CardHeader className="pb-4">
        <div className="flex items-center justify-between">
          <CardTitle className="flex items-center gap-2">
            <span className="text-2xl">ü¶´</span>
            CapyTON AI Assistant
          </CardTitle>
          <Select value={selectedModel} onValueChange={setSelectedModel}>
            <SelectTrigger className="w-64">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              {aiModels.map((model) => (
                <SelectItem key={model.id} value={model.id}>
                  <div className="flex items-center gap-2">
                    <div
                      className={`w-3 h-3 rounded-full ${model.color}`}
                    ></div>
                    <span>{model.name}</span>
                  </div>
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>

        <div className="flex items-center gap-2 text-sm text-muted-foreground">
          <div className={`w-2 h-2 rounded-full ${currentModel.color}`}></div>
          <span>{currentModel.description}</span>
          <Badge variant="secondary" className="text-xs">
            {currentModel.personality}
          </Badge>
        </div>
      </CardHeader>

      <CardContent className="flex-1 flex flex-col gap-4">
        <ScrollArea className="flex-1 pr-4">
          <div className="space-y-4">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex gap-3 ${
                  message.sender === "user" ? "justify-end" : "justify-start"
                }`}
              >
                {message.sender === "ai" && (
                  <div
                    className={`w-8 h-8 rounded-full ${currentModel.color} flex items-center justify-center text-white text-sm font-bold`}
                  >
                    ü¶´
                  </div>
                )}

                <div
                  className={`max-w-[70%] rounded-lg px-4 py-2 ${
                    message.sender === "user"
                      ? "bg-blue-500 text-white ml-auto"
                      : "bg-gray-100 text-gray-900"
                  }`}
                >
                  <p className="text-sm">{message.content}</p>
                  <span className="text-xs opacity-70 mt-1 block">
                    {message.timestamp.toLocaleTimeString("ru-RU", {
                      hour: "2-digit",
                      minute: "2-digit",
                    })}
                  </span>
                </div>

                {message.sender === "user" && (
                  <div className="w-8 h-8 rounded-full bg-blue-500 flex items-center justify-center text-white text-sm">
                    <Icon name="User" size={16} />
                  </div>
                )}
              </div>
            ))}

            {isTyping && (
              <div className="flex gap-3 justify-start">
                <div
                  className={`w-8 h-8 rounded-full ${currentModel.color} flex items-center justify-center text-white text-sm font-bold`}
                >
                  ü¶´
                </div>
                <div className="bg-gray-100 rounded-lg px-4 py-2">
                  <div className="flex gap-1">
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                    <div
                      className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                      style={{ animationDelay: "0.1s" }}
                    ></div>
                    <div
                      className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                      style={{ animationDelay: "0.2s" }}
                    ></div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </ScrollArea>

        <div className="flex gap-2">
          <Input
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder={`–°–ø—Ä–æ—Å–∏ ${currentModel.name}...`}
            className="flex-1"
            disabled={isTyping}
          />
          <Button
            onClick={sendMessage}
            disabled={!inputValue.trim() || isTyping}
            className="bg-blue-500 hover:bg-blue-600"
          >
            <Icon name="Send" size={16} />
          </Button>
        </div>

        <div className="text-xs text-center text-muted-foreground">
          üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏ –ò–ò –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç–∏–ª–µ–π –æ—Ç–≤–µ—Ç–æ–≤
        </div>
      </CardContent>
    </Card>
  );
};

export default CapyTONChat;
